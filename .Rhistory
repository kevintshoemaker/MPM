# start to think about how to implement other effects- continuous effects of age/size on survival and reproduction. Environmental drivers, etc.
# Load packages -----------
library(popbio)  # package for matrix population models
# library(nloptr)
library(Rsolnp)   # package for nonlinear constrained optimization (eg. for finding maxent probability distributions)
library(memoise)
# Load functions ---------
# s is stage specific survival, l is lambda, T is focal stage duration
## Initial error checking function ------------
init_input_check <- function(s,f,t){
if (!is.numeric(s)) {
stop("Argument 's' must be numeric")
}
if (length(s)<2) {
stop("Argument 's' must have two or more elements (one juv stage and one adult stage)")
}
if (!is.data.frame(t)) {
stop("Argument 't' must be a data frame")
}
if (!all(sapply(t,is.numeric))){
stop("All columns of data frame 't' must be numeric")
}
if (!ncol(t)%in%c(1,3)){
stop("Data frame 't' have either 1 column or 3 columns (mean, min, and max duration)")
}
}
## Scenario generating function -------------
gen_scen <- function(surv,fec,dur){
if(is.vector(dur)) dur = data.frame(dur=dur)
scen <- list()
scen$surv = surv # one survival rate per stage
scen$fec = fec  # annual fecundity (assume pre-breeding census- this represents the number of new one-year-olds entering the population next year)
scen$dur = dur  # duration of juvenile stage (mean, min, max)
scen
}
## Functions for AAS method ---------------
#  Assume pre-breeding census
#  s is vector of survival, f is fecundity (scalar), t is duration of juvenile stage
#  l is lambda, mat is a stage matrix...
gamma_aas <- function(s,l,t){
sl = s/l
if(sl==1) 0.5 else (sl^(t-1)*(1-sl)) / (1-sl^t)  # note that the formula involves the sum of finite geometric series so can be simplified
}
# s is survival of focal stage, l is current lambda estimate, t is duration of focal stage
thistrans_aas <- function(s,l,t){
gam = gamma_aas(s,l,t)   # compute gamma (fraction of survivors transitioning)
c(s*(1-gam),s*gam)    # allocate the transitions
}
# s is survival of all stages, f is fecundity of final stage, t is duration of juvenile stages
do_aas <- function(s,f,t){
init_input_check(s,f,t)
n=length(s); m0 <- matrix(0,n,n) ; m0[n,n] <- s[n] ;  m0[1,n] <- f    # construct init matrix
lam = 1  # take an initial guess at lambda
dif=Inf ; tol=1e-6
while(dif>tol){
l = lambda(m0)
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(s[g],l,t[[1]][g])
dif = abs(lambda(m0) - l)
}
if(ncol(t)>1) warning("this method is only valid for exact stage durations: variable stage durations not supported. Only first column of input 't' was used in this analysis")
m0
}
## Function for incorrect "FAS" method ------------
# function for implementing the incorrect "FAS" method (used in Gopher Tortoise SSA model)
do_fas <- function(s,f,t){
init_input_check(s,f,t)
n=length(s); m0 <- matrix(0,n,n) ; m0[n,n] <- s[n] ;  m0[1,n] <- f    # construct init matrix
gam <- 1/t[[1]]    # fraction of stage that is in the transition age
for(g in 1:(n-1)) m0[g:(g+1),g] <- c(s[g]*(1-gam[g]), s[g]*gam[g] )
warning("this method is incorrect in most cases and can be highly misleading in many real-world species")
if(ncol(t)>1) warning("variable stage durations not supported. Only first column of input 't' was used in this analysis")
m0
}
## Variable age at maturity functions ------------
### Function to compute the objective of max entropy (minimize the negative entropy) for discrete distribution
negent = function(p){
sum(p*log(p))
}
### Closure for generating equality constraint function- assume equality constraints are zeros a.la lagrange multiplier method
# ages are the possible ages for this stage,
# mean is the point estimate for maturation,
# sd is the standard deviation from the mean,
# skew is the skewness (third central moment, standardized by dividing by sigma cubed)
generate_eq = function(ages, mage){
sig=(max(ages)-min(ages))/5
function(p){
z1 = sum(p)-1       # constraint 1: sum to 1
thismean = sum(p*ages)
z2 = thismean - mage   # constraint 2: match user defined mean
this2cm = sum((ages-mage)^2 * p)
z3 = this2cm-sig^2  # constraint 3: match user defined second central moment
c(z1,z2,z3)  # z4
}
}
# ages=1:10;mage=5.5    #;skew=0
ineq = function(p){
diff(diff(log(p)))
}
# sum(s$pars)
# s$pars
# plot(s$pars)
# sum(ages*s$pars)
# sqrt(sum((ages-m)^2*s$pars))
# sum((ages-m)^3*s$pars)/(sig^3)
### Function for allocating age at maturity in variable-maturity age-structured model
meanam=9;minam=5;maxam=12
aam <- floor(minam):ceiling(maxam)
p0 = dnorm(aam,meanam,(maxam-minam)/4) ; p0= p0/sum(p0)
bounds = cbind(rep(1e-9,length(aam)),rep(1-1e-9,length(aam)))
eq = generate_eq(aam,meanam)
eq
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2])   #
suppressMessages(
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2])   #
)
suppressMessages(
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2])   #
)
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2])
s = suppressMessages(
solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2])   #
)
?solnp
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2], control = list(trace=0))   #
aam
s$pars
age_at_mat <- function(meanam, minam, maxam){
aam <- floor(minam):ceiling(maxam)
p0 = dnorm(aam,meanam,(maxam-minam)/4) ; p0= p0/sum(p0)
bounds = cbind(rep(1e-9,length(aam)),rep(1-1e-9,length(aam)))
eq = generate_eq(aam,meanam)
s = solnp(pars=p0, fun = negent,
eqfun = eq, eqB = c(0,0,0),
ineqfun = ineq, ineqLB = rep(-1e9,length(aam)-2), ineqUB=rep(0,length(aam)-2),
LB=bounds[,1],UB=bounds[,2], control = list(trace=0))   #
data.frame(
ages=aam,
prob=s$pars
)
}
age_at_mat = memoize(age_at_mat)
do_unroll <- function(s,f,t){
init_input_check(s,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- s[ns+1]    # construct init matrix
if(ncol(t)>1){
td = lapply(1:nrow(t),function(z) age_at_mat(t[z,1],t[z,2],t[z,3] )   )
for(r in 1:nrow(t)){
pr1 = numeric(t[r,3]);pr2=pr1  # probability of moving on to the next stage
pr1[td[[r]]$ages ] <- td[[r]]$prob
# hard coded to go right to adult (assuming only 1 juvenile stage for now)
for(a in 2:(na-1)) pr2[a] = pr1[a]/(1-sum(pr1[1:(a-1)]) )     # prob of transitioning conditional on not having previously transitioned
pr2 = pmax(0,pmin(1,pr2))
m1 <- diag(s[r]*(1-pr2))
m1[na-1,] <- s[r]*pr2
m0[2:na,1:(na-1)] = m1
}
}else{
m1 <- diag(rep(s[1:ns],t[[1]]))
m0[2:na,1:(na-1)] = m1
}
m0
}
scen1 <- gen_scen(surv=c(0.75,0.96),fec=0.5,dur=9)
scen2 <- gen_scen(surv=c(0.75,0.96,0.96),fec=0.5,dur=c(6,3))
# s=c(0.75,0.96);f=0.5;t=data.frame(dur=9,min=6,max=13)
scen3 <- gen_scen(surv=c(0.75,0.96),fec=0.5,dur=data.frame(dur=9,min=6,max=13))   # variable stage duration
scen4 <- gen_scen(surv=c(0.25,0.8),fec=1.29,dur=2)
s=scen3$surv;f=scen3$fec; t=scen3$dur
mat <- do_unroll(scen3$surv,scen3$fec,scen3$dur)   # very minor difference from fixed duration!!
mat
lambda(mat)
gen_scen
surv=c(0.75,0.96);fec=0.5;dur=data.frame(dur=9,min=6,max=13)
surv=c(0.75,0.96)
gen_scen
surv=list(st1=c(mean=0.75,min=0.5),ad=0.95 );fec=0.5;dur=data.frame(dur=9,min=6,max=13)
surv
jsurv=c(0.75,0.96)
jsurv=0.75
0.96
jsurv=0.75; asurv=0.96; fec=0.5; dur=9
is.vector(2)
dur
is.vector(data.frame(a=1))
nst = length(jsurv) + 1
if(is.vector(dur)) dur = data.frame(dur=dur)
nst = length(jsurv) + 1
stnames = c(paste0("st",1:(nst-1)),"ad")
stnames
is.vector(jsurv)
for(s in 1:(nst-1) ) surv[[stnames[s]]] = jsurv
surv[[stnames[nst]]] = asurv
surv
scen <- list()
scen$surv = surv # one survival rate per stage
scen$fec = fec  # annual fecundity (assume pre-breeding census- this represents the number of new one-year-olds entering the population next year)
scen$dur = dur  # duration of juvenile stage (mean, min, max)
scen
gen_scen <- function(jsurv,asurv,fec,dur){
if(is.vector(dur)) dur = data.frame(dur=dur)
nst = length(jsurv) + 1
stnames = c(paste0("st",1:(nst-1)),"ad")
if(is.vector(jsurv)){
surv = list()
for(s in 1:(nst-1) ) surv[[stnames[s]]] = jsurv
surv[[stnames[nst]]] = asurv
}
scen <- list()
scen$surv = surv # one survival rate per stage
scen$fec = fec  # annual fecundity (assume pre-breeding census- this represents the number of new one-year-olds entering the population next year)
scen$dur = dur  # duration of juvenile stage (mean, min, max)
scen
}
# jsurv=0.75; asurv=0.96; fec=0.5; dur=9
scen1 <- gen_scen(jsurv=0.75, asurv=0.96, fec=0.5, dur=9)
scen1
s=scen1$surv;f=scen1$fec;t=scen1$dur
s
f
t
length(s)
gen_scen <- function(jsurv,asurv,fec,dur){
if(is.vector(dur)) dur = data.frame(dur=dur)
nst = length(jsurv) + 1
if(is.vector(jsurv)) jsurv = data.frame(mean=jsurv)
scen <- list()
scen$jsurv = jsurv
scen$asurv = asurv
scen$fec = fec  # annual fecundity (assume pre-breeding census- this represents the number of new one-year-olds entering the population next year)
scen$dur = dur  # duration of juvenile stage (mean, min, max)
scen
}
# jsurv=0.75; asurv=0.96; fec=0.5; dur=9
scen1 <- gen_scen(jsurv=0.75, asurv=0.96, fec=0.5, dur=9)
scen1
init_input_check <- function(js,as,f,t){
if (!is.data.frame(js)) {
stop("Argument 'js' (juv surv) must be data frame")
}
if (!all(sapply(js,is.numeric))){
stop("All columns of data frame 'js' must be numeric")
}
if (length(as)>1) {
stop("adult survival must be a single value")
}
if (!is.numeric(as)){
stop("adult survival must be numeric")
}
if (length(f)>1) {
stop("fecundity must be a single value")
}
if (!is.numeric(f)){
stop("fecundity must be numeric")
}
if (!is.data.frame(t)) {
stop("Argument 't' must be a data frame")
}
if (!all(sapply(t,is.numeric))){
stop("All columns of data frame 't' must be numeric")
}
if (!ncol(t)%in%c(1,3)){
stop("Data frame 't' have either 1 column or 3 columns (mean, min, and max duration)")
}
}
jsurv=0.75; asurv=0.96; fec=0.5; dur=9
# jsurv=0.75; asurv=0.96; fec=0.5; dur=9
scen1 <- gen_scen(jsurv=0.75, asurv=0.96, fec=0.5, dur=9)
js=scen1$jsurv;as=scen1$asurv; f=scen1$fec;t=scen1$dur
js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
gamma_aas <- function(s,l,t){
sl = s/l
if(sl==1) 0.5 else (sl^(t-1)*(1-sl)) / (1-sl^t)  # note that the formula involves the sum of finite geometric series so can be simplified
}
# s is survival of focal stage, l is current lambda estimate, t is duration of focal stage
thistrans_aas <- function(s,l,t){
gam = gamma_aas(s,l,t)   # compute gamma (fraction of survivors transitioning)
c(s*(1-gam),s*gam)    # allocate the transitions
}
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
ss
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
m0
lam = 1  # take an initial guess at lambda
dif=Inf ; tol=1e-6
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(ss[g],l,t[[1]][g])
l = lambda(m0)
library(popbio)  # package for matrix population models
# library(nloptr)
library(Rsolnp)   # package for nonlinear constrained optimization (eg. for finding maxent probability distributions)
library(memoise)
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
lam = 1  # take an initial guess at lambda
dif=Inf ; tol=1e-6
l = lambda(m0)
l = popbio::lambda(m0)
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(ss[g],l,t[[1]][g])
dif = abs(lambda(m0) - l)
while(dif>tol){
l = popbio::lambda(m0)
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(ss[g],l,t[[1]][g])
dif = abs(lambda(m0) - l)
}
# s is survival of all stages, f is fecundity of final stage, t is duration of juvenile stages
do_aas <- function(js,as,f,t){
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
lam = 1  # take an initial guess at lambda
dif=Inf ; tol=1e-6
while(dif>tol){
l = popbio::lambda(m0)
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(ss[g],l,t[[1]][g])
dif = abs(lambda(m0) - l)
}
if(ncol(t)>1) warning("this method is only valid for exact stage durations: variable stage durations not supported. Only first column of input 't' was used in this analysis")
if(ncol(js)>1) warning("this method is only valid for constant survival within stage: survival 'ramp' not supported. Only first column of input 'js' was used in this analysis")
m0
}
init_input_check(js,as,f,t)
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
gam <- 1/t[[1]]    # fraction of stage that is in the transition age
for(g in 1:(n-1)) m0[g:(g+1),g] <- c(ss[g]*(1-gam[g]), ss[g]*gam[g] )
m0
# function for implementing the incorrect "FAS" method (used in Gopher Tortoise SSA model)
do_fas <- function(js,as,f,t){
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
gam <- 1/t[[1]]    # fraction of stage that is in the transition age
for(g in 1:(n-1)) m0[g:(g+1),g] <- c(ss[g]*(1-gam[g]), ss[g]*gam[g] )
warning("this method is incorrect in most cases and can be highly misleading in many real-world species")
if(ncol(t)>1) warning("variable stage durations not supported. Only first column of input 't' was used in this analysis")
if(ncol(js)>1) warning("this method is only valid for constant survival within stage: survival 'ramp' not supported. Only first column of input 'js' was used in this analysis")
m0
}
# s is survival of all stages, f is fecundity of final stage, t is duration of juvenile stages
do_aas <- function(js,as,f,t){
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
n=length(ss); m0 <- matrix(0,n,n) ; m0[n,n] <- ss[n] ;  m0[1,n] <- f    # construct init matrix
lam = 1  # take an initial guess at lambda
dif=Inf ; tol=1e-6
while(dif>tol){
l = popbio::lambda(m0)
for(g in 1:(n-1)) m0[g:(g+1),g] = thistrans_aas(ss[g],l,t[[1]][g])
dif = abs(lambda(m0) - l)
}
if(ncol(t)>1) warning("this method is only valid for exact stage durations: variable stage durations not supported. Only first column of input 't' was used in this analysis")
if(ncol(js)>1) warning("this method is only valid for constant survival within stage: survival 'ramp' not supported. Only first column of input 'js' was used in this analysis")
m0
}
# js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
mat <- do_aas(js=scen1$jsurv,as=scen1$asurv,f=scen1$fec,t=scen1$dur)    # AAS
mat
lambda(mat)
mat <- do_fas(scen1$jsurv,scen1$asurv,scen1$fec,scen1$dur)  # FAS
mat
lambda(mat)  # 1.065  --- 6.5% growth rate per year   - much higher growth rate!!!
js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
init_input_check(js,as,f,t)
ncol(t)>1
ncol(t)
t
sum(t[[1]])
na = sum(t[[1]])+1; ns = nrow(t[[1]])   # na is number of age classes, ns is number of juv stage classes
na
ns
ns = nrow(t)
ns
m0
ss = c(js[[1]],as)
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- ss[ns+1]    # construct init matrix
m0
rep(c(1,2),c(2,3))
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- ss[ns+1]    # construct init matrix
m1 <- diag(rep(ss[1:ns],t[[1]]))
m0[2:na,1:(na-1)] = m1
m0
do_unroll
do_unroll <- function(js,as,f,t){
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
if(ncol(t)>1){   # hard coded for only one row in this case- that is, only 1 juvenile stage
na = sum(t[[3]]) + t[[3]]-t[[2]] + 1
ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- s[ns+1]    # construct init matrix
td = lapply(1:nrow(t),function(z) age_at_mat(t[z,1],t[z,2],t[z,3] )   )
for(r in 1:nrow(t)){
pr1 = numeric(t[r,3]);pr2=pr1  # probability of moving on to the next stage
pr1[td[[r]]$ages ] <- td[[r]]$prob
# hard coded to go right to adult (assuming only 1 juvenile stage for now)
for(a in 2:(na-1)) pr2[a] = pr1[a]/(1-sum(pr1[1:(a-1)]) )     # prob of transitioning conditional on not having previously transitioned
pr2 = pmax(0,pmin(1,pr2))
m1 <- diag(s[r]*(1-pr2))
m1[na-1,] <- s[r]*pr2
m0[2:na,1:(na-1)] = m1
}
}else{
na = sum(t[[1]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- ss[ns+1]    # construct init matrix
m1 <- diag(rep(ss[1:ns],t[[1]]))
m0[2:na,1:(na-1)] = m1
}
m0
}
# js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
mat <- do_unroll(scen1$surv,scen1$fec,scen1$dur)   # unroll
mat
# js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
mat <- do_unroll(scen1$jsurv,scen1$asurv,scen1$fec,scen1$dur)   # unroll
mat
lambda(mat)       # gives the same result as AAS- as it should!
# js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
mat <- do_aas(js=scen1$jsurv,as=scen1$asurv,f=scen1$fec,t=scen1$dur)    # AAS
mat
lambda(mat)
mat <- do_fas(scen1$jsurv,scen1$asurv,scen1$fec,scen1$dur)  # FAS
mat
lambda(mat)  # 1.065  --- 6.5% growth rate per year   - much higher growth rate!!!
scen2 <- gen_scen(jsurv=c(0.75,0.96),asurv=0.96,fec=0.5,dur=c(6,3))
# js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
mat <- do_aas(js=scen1$jsurv,as=scen1$asurv,f=scen1$fec,t=scen1$dur)    # AAS
mat
lambda(mat)
js=scen2$jsurv;as=scen2$asurv;f=scen2$fec;t=scen2$dur
# js=scen2$jsurv;as=scen2$asurv;f=scen2$fec;t=scen2$dur
mat <- do_aas(scen2$jsurv,scen2$asurv,scen2$fec,scen2$dur)    # AAS
mat
lambda(mat)
mat <- do_unroll(scen2$jsurv,scen2$asurv,scen2$fec,scen2$dur)   # unroll
mat
lambda(mat)       # gives the same result as AAS- as it should!
mat <- do_fas(scen2$jsurv,scen2$asurv,scen2$fec,scen2$dur)  # FAS
mat
lambda(mat)  # still higher, but not as wrong
# surv=c(0.75,0.96);fec=0.5;dur=data.frame(dur=9,min=6,max=13)
scen3 <- gen_scen(jsurv=c(0.75),asurv=0.96,fec=0.5,dur=data.frame(dur=9,min=6,max=13))   # variable stage duration
mat <- do_aas(scen3$jsurv,scen3$asurv,scen3$fec,scen3$dur)   # aas- gives warning message
mat
lambda(mat)
js=scen3$jsurv;as=scen3$asurv,f=scen3$fec;t=scen3$dur
js=scen3$jsurv;as=scen3$asurv;f=scen3$fec;t=scen3$dur
init_input_check(js,as,f,t)
ss = c(js[[1]],as)
ss
sm = 0.75; sa = 0.5; sz = 0.95; t= 5
k=0.15
sa + (sz-sa) * ( (1-exp(-k * ((1:t)-1) ) ) / (1-exp(-k * (t - 1) ) ) )
sa + (sz-sa) * ( (1-exp(-k * (seq(1,t,length=20)-1) ) ) / (1-exp(-k * (t - 1) ) ) )
msurv = mean( sa + (sz-sa) * ( (1-exp(-k * (seq(1,t,length=20)-1) ) ) / (1-exp(-k * (t - 1) ) ) ) )
msurv
opt_func = function(k){
msurv = mean( sa + (sz-sa) * ( (1-exp(-k * (seq(1,t,length=20)-1) ) ) / (1-exp(-k * (t - 1) ) ) ) )
abs(msurv-sm)
}
opt = optimize(opt_func,c(-10,10))
opt
sa + (sz-sa) * ( (1-exp(-thisk * ( 1:t - 1 ) ) ) / (1 - exp(-thisk * (t - 1) ) ) )
thisk = opt$minimum
sa + (sz-sa) * ( (1-exp(-thisk * ( 1:t - 1 ) ) ) / (1 - exp(-thisk * (t - 1) ) ) )
# sm = 0.75; sa = 0.5; sz = 0.95; t= 5    # note: t should be integer
ramp_fun = function(sm,sa,sz,y){
opt_func = function(k){
msurv = mean( sa + (sz-sa) * ( (1-exp(-k * (seq(1,t,length=20)-1) ) ) / (1-exp(-k * (t - 1) ) ) ) )
abs(msurv-sm)
}
opt = optimize(opt_func,c(-10,10))
thisk = opt$minimum
sa + (sz-sa) * ( (1-exp(-thisk * ( 1:t - 1 ) ) ) / (1 - exp(-thisk * (t - 1) ) ) )
}
ramp_fun(0.75,0.5,0.96,10)
# sm = 0.75; sa = 0.5; sz = 0.95; y= 5    # note: t should be integer
ramp_fun = function(sm,sa,sz,y){
opt_func = function(k){
msurv = mean( sa + (sz-sa) * ( (1-exp(-k * (seq(1,y,length=20)-1) ) ) / (1-exp(-k * (y - 1) ) ) ) )
abs(msurv-sm)
}
opt = optimize(opt_func,c(-10,10))
thisk = opt$minimum
sa + (sz-sa) * ( (1-exp(-thisk * ( 1:y - 1 ) ) ) / (1 - exp(-thisk * (y - 1) ) ) )
}
ramp_fun(0.75,0.5,0.96,10)
mean(ramp_fun(0.75,0.5,0.96,10))
mean(ramp_fun(0.9,0.5,0.96,10))
mean(ramp_fun(0.65,0.5,0.96,10))
plot(1:10,ramp_fun(0.65,0.5,0.96,10),type="l")
plot(1:10,ramp_fun(0.75,0.5,0.96,10),type="l")
plot(1:10,ramp_fun(0.8,0.5,0.96,10),type="l")
