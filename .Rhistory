stprob
agedf
stprob = agedf[,stnames]
s=1
stprob[,s] = pmax(1e-10,pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])))
stprob
stprob[,s]
agedf
stprob[,1]
stprob = agedf[,stnames]
stprob[,1]
stprob[,1] = 1
s=1
s=1
stprob[,s]
stprob[,s] = pmin(1,stprob[,s]-cumsum(agedf[,sprintf("st_%s",s+1)]))
stprob[,s]
stprob[,s][stprob[,s]<1e-10] = 0
stprob
stprob
stprob[,s+1]
stprob[,s]
s
colSums(agedf[,stnames])   # make sure cols sum to 1...
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
s=1
# all who did not transition to the next stage stay
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)]))
pstay
# all who did not transition to the next stage stay
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
pstay
stprob[,1:s,drop=F]
stprob[,s] = pstay
stprob[,s+1] = 1 - pstay
s=2
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
pstay
stprob[,s]
pstay
stprob[,s] = stprob[,s] * pstay  # need to be in stage and stay
stprob[,s]
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
s=1
# all who did not transition to the next stage stay
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
pstay
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
s
# all who did not transition to the next stage stay
stay = stprob[,s] * pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; stay[stay<1e-10] = 0
stay
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
# all who did not transition to the next stage stay
start = stprob[,s]
start
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
pstay
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
# all who did not transition to the next stage stay
start = stprob[,s]
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
stprob[,s] = start * pstay   # need to be in stage currently AND stay in stage
stprob[,s+1] = start * (1 - pstay)
stprob
s=2
# all who did not transition to the next stage stay
start = stprob[,s]
start
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
pstay
stprob[,s] = start * pstay   # need to be in stage currently AND stay in stage
stprob[,s+1] = start * (1 - pstay)
stprob
rowSums(stprob)
survdf
survdf*stprob
rowSums( survdf*stprob )
agedf$surv = rowSums( survdf*stprob )
stprob[,adstage]
f
agedf$f = stprob[,adstage] * f
agedf$f
stprob
m0
t[[1]]
m1 <- diag(agedf$surv)
m1
m0[2:na,1:(na-1)] = m1
m0
m0[1,1:na]
m0[1,1:(na-1)]
m0[1,1:(na-1)] = agedf$f
m0
js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
ncol(t)>1
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
m0
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
adstage
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
agedf
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
agedf$surv
js
t[[1]]
agedf$surv = rep(js,t[[1]])
agedf$surv = rep(js,t[[1]])
agedf$f = 0
agedf
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
js=scen2$jsurv;as=scen2$asurv;f=scen2$fec;t=scen2$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
agedf
ncol(t)>1
ncol(js)>1
agedf$surv = rep(js,t[[1]])
js
agedf$surv = rep(js[[1]],t[[1]])
agedf$surv
agedf$f = 0
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
js=scen1$jsurv;as=scen1$asurv;f=scen1$fec;t=scen1$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
ncol(js)>1
js
agedf$surv = rep(js[[1]],t[[1]])
agedf$f = 0
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
## variable juvenile stage duration ---------
js=scen3$jsurv; as=scen3$asurv; f=scen3$fec; t=scen3$dur
js
## variable juvenile stage duration ---------
js=scen3$jsurv; as=scen3$asurv; f=scen3$fec; t=scen3$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
ncol(t)>1
ncol(js)
survmat=NULL   # set up survival by age matrix (for weighted average of survival across stages)
for(ss in 1:(ns)){
survmat = cbind(survmat,rep(js[[1]][ss],na-1))
}
survmat = cbind(survmat, rep(as,na-1))
colnames(survmat)=stnames    # keep as matrix?
survmat
td = lapply(1:nrow(t),function(z) vari_dur(t[z,1],t[z,2],t[z,3] )   )  # variable ages at transition
td
j=1
ns
for(j in 1:ns){   # determine probability densities of transitioning at each age given variable durations
thisst = j ; nextst = j+1
thiscol = sprintf("st_%s",thisst)
nextcol = sprintf("st_%s",nextst)
thistd = td[[j]]
if(j==1){
agedf[[nextcol]][match(thistd$dur,agedf$age)] = thistd$prob
}else{
nonzero_ages = agedf$age[agedf[[thiscol]]>1e-15 ]
a=1
for(a in 1:length(nonzero_ages)){  # loop through all ages of the prior stage and redistribute them
thisa = nonzero_ages[a]
agedf[[nextcol]][thisa+thistd$dur] = agedf[[nextcol]][thisa+thistd$dur] +
agedf[[thiscol]][thisa] * thistd$prob
}
}
}# end loop through stages
colSums(agedf[,stnames])   # make sure cols sum to 1...
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
s=2
for(s in 1:ns){
start = stprob[,s]   # all who did not transition to the next stage stay
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
stprob[,s] = start * pstay   # need to be in stage currently AND stay in stage
stprob[,s+1] = start * (1 - pstay)
}
rowSums(stprob)   # make sure rows sum to 1
stprob
agedf$surv = rowSums( survmat*stprob )   # survival by age
agedf$f = stprob[,adstage] * f
agedf
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
js=scen4$jsurv;as=scen4$asurv;f=scen4$fec;t=scen4$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
survmat=NULL   # set up survival by age matrix (for weighted average of survival across stages)
if(ncol(js)>1){  # is there a ramp?
}else{
for(ss in 1:(ns)){
survmat = cbind(survmat,rep(js[[1]][ss],na-1))
}
survmat = cbind(survmat, rep(as,na-1))
colnames(survmat)=stnames    # keep as matrix?
}
td = lapply(1:nrow(t),function(z) vari_dur(t[z,1],t[z,2],t[z,3] )   )  # variable ages at transition
j=1
for(j in 1:ns){   # determine probability densities of transitioning at each age given variable durations
thisst = j ; nextst = j+1
thiscol = sprintf("st_%s",thisst)
nextcol = sprintf("st_%s",nextst)
thistd = td[[j]]
if(j==1){
agedf[[nextcol]][match(thistd$dur,agedf$age)] = thistd$prob
}else{
nonzero_ages = agedf$age[agedf[[thiscol]]>1e-15 ]
a=1
for(a in 1:length(nonzero_ages)){  # loop through all ages of the prior stage and redistribute them
thisa = nonzero_ages[a]
agedf[[nextcol]][thisa+thistd$dur] = agedf[[nextcol]][thisa+thistd$dur] +
agedf[[thiscol]][thisa] * thistd$prob
}
}
}# end loop through stages
colSums(agedf[,stnames])   # make sure cols sum to 1...
stprob = agedf[,stnames]
stprob[,1] = 1  # start with everyone in first stage
s=2
for(s in 1:ns){
start = stprob[,s]   # all who did not transition to the next stage stay
pstay = pmin(1,1-cumsum(agedf[,sprintf("st_%s",s+1)])) ; pstay[pstay<1e-10] = 0
stprob[,s] = start * pstay   # need to be in stage currently AND stay in stage
stprob[,s+1] = start * (1 - pstay)
}
rowSums(stprob)   # make sure rows sum to 1
agedf$surv = rowSums( survmat*stprob )   # survival by age
agedf$f = stprob[,adstage] * f
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
scen5 <- gen_scen(jsurv=data.frame(mean=0.75,min=0.5),asurv=0.95, fec=1.29, dur=9)
js=scen5$jsurv;as=scen5$asurv;f=scen5$fec;t=scen5$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
js
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
adstage
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
ncol(t)>1
ncol(js)
ns
z=1
js$mean[z]
ss = c(js$mean,as)
ss
ss[z+1]
t[[1]][1]
ramp_fun(js$mean[z],js$min[z],ss[z+1],t[[1]][1])
prev=1
prev=0
ss = c(js$mean,as); thisdur = t[[1]][1]
ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[(prev+1):prev+length(thisdur)]
agedf$surv
(prev+1):(prev+length(thisdur))
(prev+(1:length(thisdur))
prev+(1:length(thisdur))
length(thisdur)
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))]
agedf$surv[prev+(1:length(thisramp))] = thisramp
agedf$surv
plot(agedf[,c("age","surv")])
ns
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
agedf$f = 0   # for now assume only adult stage is reproductive
m1 <- diag(agedf$surv)
m0[2:na,1:(na-1)] = m1
m0[1,1:(na-1)] = agedf$f
m0
agedf
scen6 <- gen_scen(jsurv=data.frame(mean=c(0.5,0.8),min=c(0.25,0.65)),asurv=0.95, fec=1.29, dur=c(3,4))
js=scen6$jsurv;as=scen6$asurv;f=scen6$fec;t=scen6$dur
js=scen6$jsurv;as=scen6$asurv;f=scen6$fec;t=scen6$dur
init_input_check(js,as,f,t)
na = sum(t[[ncol(t)]])+1; ns = nrow(t)   # na is number of age classes, ns is number of juv stage classes
m0 <- matrix(0,na,na) ;  m0[1,na] <- f;  m0[na,na] <- as    # construct init matrix
stnames = paste0("st_", 1:(ns+1))
adstage = stnames[ns+1]
agedf = data.frame(    # make data frame to do preliminary computations
age = 1:(na-1)
)
agedf[stnames] <- lapply(1:(ns+1), function(x) 0)
agedf$surv = NA; agedf$f = NA; agedf$st_1=0; agedf$st_1[1] = 1
agedf
ncol(t)>1
ncol(js)>1
prev=0
for(z in 1:ns){
ss = c(js$mean,as); thisdur = t[[1]][1]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))] = thisramp
# plot(agedf[,c("age","surv")])
}
agedf$surv
prev=0
ns
ss = c(js$mean,as)
ss
thisdur = t[[1]][1]
thisdur
t[[1]][z]
t
z=1
prev=0
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
thisramp
z
ss[z+1]
js$min[z]
js$mean[z]
js
thisdur = t[[1]][z]
t
prev=0
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))] = thisramp
agedf$surv
z=2
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
thisramp
js
agedf$surv[prev+(1:length(thisramp))] = thisramp
plot(agedf[,c("age","surv")])
agedf$surv
prev=0
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
z=1
prev=0; z=1
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))] = thisramp
agedf$surv
prev
prev=length(thisramp)
prev=0; z=1
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))] = thisramp
prev=length(thisramp)
prev
z=2
ss = c(js$mean,as); thisdur = t[[1]][z]
thisramp = ramp_fun(js$mean[z],js$min[z],ss[z+1],thisdur)
agedf$surv[prev+(1:length(thisramp))] = thisramp
prev=length(thisramp)
agedf$surv
plot(agedf[,c("age","surv")])
scen6 <- gen_scen(jsurv=data.frame(mean=c(0.5,0.8),min=c(0.25,0.65)),asurv=0.95, fec=1.29, dur=c(3,4))
prev=ns+1; z=1
t[[prev-1]][z]
t
ss = c(js$mean,as); thisdur = t[[1]][prev-1]
thisdur
js$mean[prev-1]
ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],ss[prev],thisdur)
thisramp
ndx = nrow(agedf)
ndx
(ndx-length(thisramp)+1):ndx
thisramp
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1
ss = c(js$mean,as); thisdur = t[[1]][prev-1]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],ss[prev],thisdur)
thisramp
prev=ns+1; z=1; ndx = nrow(agedf)
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
agedf$surv
prev=prev-1; thismax=min(thisramp)
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
thisramp
thismax
prev=ns+1; z=1; ndx = nrow(agedf)
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1; thismax=min(thisramp)
thismax
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1; thismax=min(thisramp)
plot(agedf[,c("age","surv")])
agedf$surv
prev=ns+1; z=1; ndx = nrow(agedf)
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
agedf$surv
prev=prev-1; thismax=min(thisramp)
ss = c(js$mean,as); thisdur = t[[1]][prev-1]; thismax = ss[prev]
thismax
prev=ns+1; z=1; ndx = nrow(agedf); ss = c(js$mean,as); thismax = ss[prev]
thisdur = t[[1]][prev-1];
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1; thismax=min(thisramp)
thisdur = t[[1]][prev-1];
thisdur
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
thisramp
(ndx-length(thisramp)+1)
ndx
prev=ns+1; z=1; ndx = nrow(agedf); ss = c(js$mean,as); thismax = ss[prev]
thisdur = t[[1]][prev-1];
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1; thismax=min(thisramp); ndx=ndx-length(thisramp)
thisdur = t[[1]][prev-1];
thisramp = ramp_fun(js$mean[prev-1],js$min[prev-1],thismax,thisdur)
ndx
ndx-length(thisramp)+1
ndx
agedf$surv[(ndx-length(thisramp)+1):ndx] = thisramp
prev=prev-1; thismax=min(thisramp); ndx=ndx-length(thisramp)
plot(agedf[,c("age","surv")])
